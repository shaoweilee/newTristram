{"version":3,"sources":["webpack:///./src/pages/search/components/notfound/index.js","webpack:///./src/pages/search/index.js"],"names":["__webpack_require__","NotFound","props","_react2","default","createElement","className","searchType","keyword","_notfound","_reactRedux","_dumblist","_store","Search","this","loadmore","requestPage","changeKeyword","Fragment","_header2","showSearchResult","DumbList","React","Component","connect","state","articlelist","getIn","hasMore","dispatch","actionCreators","searchAsyncAC","search","decodeURI","location","type","match","changeKeywordAndTypeAC","slice","indexOf"],"mappings":"qMAAA,wDAAAA,EAAA,IACAA,EAAA,OAaSC,SAXQ,SAACC,GAAD,OACfC,EAAAC,QAAAC,cAAA,OAAKC,UAAU,iBAEU,YAArBJ,EAAMK,WACJJ,EAAAC,QAAAC,cAAA,MAAIC,UAAU,mBAAd,UAAuCH,EAAAC,QAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMM,SAA5E,UAEAL,EAAAC,QAAAC,cAAA,MAAIC,UAAU,mBAAd,MAAmCH,EAAAC,QAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMM,SAAxE,2JCTRR,EAAA,QACAA,EAAA,KACAS,EAAAT,EAAA,IACAU,EAAAV,EAAA,IACAW,EAAAX,EAAA,IACAY,EAAAZ,EAAA,uDACAA,EAAA,SAEMa,qNAEFC,KAAKZ,MAAMa,SAASD,KAAKZ,MAAMc,aAC/BF,KAAKZ,MAAMe,iDAGX,OACEd,EAAAC,QAAAC,cAACF,EAAAC,QAAMc,SAAP,KACEf,EAAAC,QAAAC,cAACc,EAAAf,QAAD,MACAD,EAAAC,QAAAC,cAAA,WAASC,UAAU,oBAEfQ,KAAKZ,MAAMkB,iBACTjB,EAAAC,QAAAC,cAACF,EAAAC,QAAMc,SAAP,KAE8B,YAA1BJ,KAAKZ,MAAMK,WACTJ,EAAAC,QAAAC,cAAA,MAAIC,UAAU,aAAd,WAAkCH,EAAAC,QAAAC,cAAA,YAAOS,KAAKZ,MAAMM,SAApD,UAEAL,EAAAC,QAAAC,cAAA,MAAIC,UAAU,aAAd,OAA8BH,EAAAC,QAAAC,cAAA,YAAOS,KAAKZ,MAAMM,SAAhD,WAEJL,EAAAC,QAAAC,cAACM,EAAAU,SAAaP,KAAKZ,QAGrBC,EAAAC,QAAAC,cAACI,EAAAR,UAASO,QAASM,KAAKZ,MAAMM,QAASD,WAAYO,KAAKZ,MAAMK,sBAtBvDe,UAAMC,sBA+CZ,EAAAb,EAAAc,SAlBE,SAACC,GAAD,OACfC,YAAaD,EAAME,OAAO,SAAU,gBACpCX,YAAaS,EAAME,OAAO,SAAU,aACpCP,iBAAkBK,EAAME,OAAO,SAAU,qBACzCnB,QAASiB,EAAME,OAAO,SAAU,YAChCpB,WAAYkB,EAAME,OAAO,SAAU,eACnCC,QAASH,EAAME,OAAO,SAAU,cAEd,SAACE,GAAD,OAClBd,SADiC,SACxBC,GACPa,EAASC,iBAAeC,cAAcf,KAExCC,cAJiC,WAK/B,IAAIe,EAASC,UAAUC,SAASF,QAC5BG,EAAOH,EAAOI,MAAM,0BAA0B,GAClDP,EAASC,iBAAeO,uBAAuBF,EAAMH,EAAOM,MAAMN,EAAOO,QAAQ,KAAO,QAG7E,CAA+B1B","file":"10_431780e3.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst NotFound = (props) => (\r\n  <div className='not_container'>\r\n    {\r\n      props.searchType === 'keyword' ?\r\n        <h1 className='not_description'>抱歉，未找到与<span className='not_keyword'>{props.keyword}</span>相关的内容~</h1>\r\n        :\r\n        <h1 className='not_description'>抱歉，<span className='not_keyword'>{props.keyword}</span>分类下暂无内容~</h1>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport { NotFound };","import React from \"react\";\r\nimport Header from \"../../common/header\";\r\nimport { NotFound } from \"./components/notfound\";\r\nimport { connect } from \"react-redux\";\r\nimport { DumbList } from \"../home/components/list/components/dumblist\";\r\nimport { actionCreators } from \"./store\";\r\nimport \"./index.scss\";\r\n\r\nclass Search extends React.Component {\r\n  componentDidMount() {\r\n    this.props.loadmore(this.props.requestPage);\r\n    this.props.changeKeyword();\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <section className='search_container'>\r\n          {\r\n            this.props.showSearchResult ?\r\n              <React.Fragment>\r\n                {\r\n                  this.props.searchType === 'keyword' ?\r\n                    <h1 className='search_h1'>为您列出关键字是<span>{this.props.keyword}</span>的搜索结果：</h1>\r\n                    :\r\n                    <h1 className='search_h1'>为您列出<span>{this.props.keyword}</span>分类下的文章：</h1>\r\n                }\r\n                <DumbList {...this.props} />\r\n              </React.Fragment>\r\n              :\r\n              <NotFound keyword={this.props.keyword} searchType={this.props.searchType} />\r\n          }\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapState = (state) => ({\r\n  articlelist: state.getIn(['search', 'articlelist']),\r\n  requestPage: state.getIn(['search', 'nextPage']),\r\n  showSearchResult: state.getIn(['search', 'showSearchResult']),\r\n  keyword: state.getIn(['search', 'keyword']),\r\n  searchType: state.getIn(['search', 'searchType']),\r\n  hasMore: state.getIn(['search', 'hasMore']),\r\n});\r\nconst mapDispatch = (dispatch) => ({\r\n  loadmore(requestPage) {\r\n    dispatch(actionCreators.searchAsyncAC(requestPage));\r\n  },\r\n  changeKeyword() {\r\n    let search = decodeURI(location.search);\r\n    let type = search.match(/^\\?(keyword|category)/i)[1];\r\n    dispatch(actionCreators.changeKeywordAndTypeAC(type, search.slice(search.indexOf('=') + 1)));\r\n  },\r\n});\r\nexport default connect(mapState, mapDispatch)(Search);"],"sourceRoot":""}